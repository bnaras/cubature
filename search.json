[{"path":"/LICENSE.html","id":"gnu-general-public-license","dir":"","previous_headings":"","what":"GNU GENERAL PUBLIC LICENSE","title":"NA","text":"Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"NA","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"NA","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"NA","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"NA","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"NA","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"NA","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"NA","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"NA","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"NA","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"NA","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"NA","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"NA","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"NA","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"NA","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License.","title":"NA","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"NA","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"NA","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"NA","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"NA","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"NA","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands `show w’ `show c’ show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see https://www.gnu.org/licenses/. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read https://www.gnu.org/licenses/--lgpl.html.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU General Public License as published by     the Free Software Foundation, either version 3 of the License, or     (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU General Public License for more details.      You should have received a copy of the GNU General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author>     This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.     This is free software, and you are welcome to redistribute it     under certain conditions; type `show c' for details."},{"path":"/NOTES.html","id":null,"dir":"","previous_headings":"","what":"Build Notes","title":"Build Notes","text":"Personal notes synchronizing new version underlying C library.","code":""},{"path":"/NOTES.html","id":"for-cubature","dir":"","previous_headings":"","what":"For Cubature","title":"Build Notes","text":"Download tagged tar.gz release Replace clencurt.h version generated using M=16 rather default M=19. Easiest copy version clencurt.h Move Makefile Makefile.orig Move Makefile previous version Copy includes new C library release Rest usual","code":""},{"path":"/NOTES.html","id":"for-cuba","dir":"","previous_headings":"","what":"For Cuba","title":"Build Notes","text":"now moved separate repo, allowing track changes Thomas Hahn makes. changes needed R package R_pkg branch use branch submodule , Unix-like systems default. changes Windows system isolated Cuba-win directory copied using Makefile.win.","code":""},{"path":"/articles/cubature.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Cubature Vectorization Results","text":"R cubature package exposes hcubature pcubature routines underlying C cubature library, including vectorized interfaces. Per documentation, use pcubature advisable smooth integrands dimensions three . fact, pcubature routines perform significantly worse vectorized hcubature inappropriate cases. doubt, better using hcubature. Version 2.0 package integrates Cuba library well, providing vectorized interfaces. main point note examine difference vectorization makes. recommendations summary section.","code":""},{"path":"/articles/cubature.html","id":"a-timing-harness","dir":"Articles","previous_headings":"","what":"A Timing Harness","title":"Cubature Vectorization Results","text":"harness provide timing results hcubature, pcubature (appropriate) Cuba cuhre calls. begin creating harness calls. reel timing runs.","code":"library(benchr) library(cubature)  harness <- function(which = NULL,                     f, fv, lowerLimit, upperLimit, tol = 1e-3, times = 20, ...) {      fns <- c(hc = \"Non-vectorized Hcubature\",              hc.v = \"Vectorized Hcubature\",              pc = \"Non-vectorized Pcubature\",              pc.v = \"Vectorized Pcubature\",              cc = \"Non-vectorized cubature::cuhre\",              cc_v = \"Vectorized cubature::cuhre\")     cc <- function() cubature::cuhre(f = f,                                      lowerLimit = lowerLimit, upperLimit = upperLimit,                                      relTol = tol,                                      ...)     cc_v <- function() cubature::cuhre(f = fv,                                        lowerLimit = lowerLimit, upperLimit = upperLimit,                                        relTol = tol,                                        nVec = 1024L,                                        ...)      hc <- function() cubature::hcubature(f = f,                                          lowerLimit = lowerLimit,                                          upperLimit = upperLimit,                                          tol = tol,                                          ...)      hc.v <- function() cubature::hcubature(f = fv,                                            lowerLimit = lowerLimit,                                            upperLimit = upperLimit,                                            tol = tol,                                            vectorInterface = TRUE,                                            ...)      pc <- function() cubature::pcubature(f = f,                                      lowerLimit = lowerLimit,                                      upperLimit = upperLimit,                                      tol = tol,                                      ...)      pc.v <- function() cubature::pcubature(f = fv,                                            lowerLimit = lowerLimit,                                            upperLimit = upperLimit,                                            tol = tol,                                            vectorInterface = TRUE,                                            ...)          ndim = length(lowerLimit)      if (is.null(which)) {         fnIndices <- seq_along(fns)     } else {         fnIndices <- na.omit(match(which, names(fns)))     }     fnList <- lapply(names(fns)[fnIndices], function(x) call(x))      argList <- c(fnList, times = times, progress = FALSE)     result <- do.call(benchr::benchmark, args = argList)     d <- summary(result)[seq_along(fnIndices), ]     d$expr <- fns[fnIndices]     d }"},{"path":"/articles/cubature.html","id":"example-1-","dir":"Articles","previous_headings":"","what":"Example 1.","title":"Cubature Vectorization Results","text":"","code":"func <- function(x) sin(x[1]) * cos(x[2]) * exp(x[3]) func.v <- function(x) {     matrix(apply(x, 2, function(z) sin(z[1]) * cos(z[2]) * exp(z[3])), ncol = ncol(x)) }  d <- harness(f = func, fv = func.v,              lowerLimit = rep(0, 3),              upperLimit = rep(1, 3),              tol = 1e-5,              times = 100) knitr::kable(d, digits = 3, row.names = FALSE)"},{"path":"/articles/cubature.html","id":"multivariate-normal","dir":"Articles","previous_headings":"","what":"Multivariate Normal","title":"Cubature Vectorization Results","text":"Using cubature, evaluate ∫Rϕ(x)dx \\int_R\\phi(x)dx  ϕ(x)\\phi(x) three-dimensional multivariate normal density mean 0, variance Σ=(1351335111151311151) \\Sigma = \\left(\\begin{array}{rrr} 1 &\\frac{3}{5} &\\frac{1}{3}\\\\ \\frac{3}{5} &1 &\\frac{11}{15}\\\\ \\frac{1}{3} &\\frac{11}{15} & 1 \\end{array} \\right)  RR [−12,1]×[−12,4]×[−12,2].[-\\frac{1}{2}, 1] \\times [-\\frac{1}{2}, 4] \\times [-\\frac{1}{2}, 2]. construct scalar function (my_dmvnorm) vector analog (my_dmvnorm_v). First functions. Now timing. effect vectorization huge. makes sense users vectorize integrands much possible efficiency. Furthermore, particular example, expect mvtnorm::pmvnorm pretty well since specialized multivariate normal. good news vectorized versions hcubature pcubature quite competitive compare table one .","code":"m <- 3 sigma <- diag(3) sigma[2,1] <- sigma[1, 2] <- 3/5 ; sigma[3,1] <- sigma[1, 3] <- 1/3 sigma[3,2] <- sigma[2, 3] <- 11/15 logdet <- sum(log(eigen(sigma, symmetric = TRUE, only.values = TRUE)$values)) my_dmvnorm <- function (x, mean, sigma, logdet) {     x <- matrix(x, ncol = length(x))     distval <- stats::mahalanobis(x, center = mean, cov = sigma)     exp(-(3 * log(2 * pi) + logdet + distval)/2) }  my_dmvnorm_v <- function (x, mean, sigma, logdet) {     distval <- stats::mahalanobis(t(x), center = mean, cov = sigma)     exp(matrix(-(3 * log(2 * pi) + logdet + distval)/2, ncol = ncol(x))) } d <- harness(f = my_dmvnorm, fv = my_dmvnorm_v,              lowerLimit = rep(-0.5, 3),              upperLimit = c(1, 4, 2),              tol = 1e-5,              times = 10,              mean = rep(0, m), sigma = sigma, logdet = logdet) knitr::kable(d, digits = 3) library(mvtnorm) g1 <- function() pmvnorm(lower = rep(-0.5, m),                                   upper = c(1, 4, 2), mean = rep(0, m), corr = sigma,                                   alg = Miwa(), abseps = 1e-5, releps = 1e-5) g2 <- function() pmvnorm(lower = rep(-0.5, m),                          upper = c(1, 4, 2), mean = rep(0, m), corr = sigma,                          alg = GenzBretz(), abseps = 1e-5, releps = 1e-5) g3 <- function() pmvnorm(lower = rep(-0.5, m),                          upper = c(1, 4, 2), mean = rep(0, m), corr = sigma,                          alg = TVPACK(), abseps = 1e-5, releps = 1e-5)  knitr::kable(summary(benchr::benchmark(g1(), g2(), g3(), times = 20, progress = FALSE)),              digits = 3, row.names = FALSE)"},{"path":"/articles/cubature.html","id":"product-of-cosines","dir":"Articles","previous_headings":"","what":"Product of cosines","title":"Cubature Vectorization Results","text":"","code":"testFn0 <- function(x) prod(cos(x)) testFn0_v <- function(x) matrix(apply(x, 2, function(z) prod(cos(z))), ncol = ncol(x))  d <- harness(f = testFn0, fv = testFn0_v,              lowerLimit = rep(0, 2), upperLimit = rep(1, 2), times = 1000) knitr::kable(d, digits = 3)"},{"path":"/articles/cubature.html","id":"gaussian-function","dir":"Articles","previous_headings":"","what":"Gaussian function","title":"Cubature Vectorization Results","text":"","code":"testFn1 <- function(x) {     val <- sum(((1 - x) / x)^2)     scale <- prod((2 / sqrt(pi)) / x^2)     exp(-val) * scale }  testFn1_v <- function(x) {     val <- matrix(apply(x, 2, function(z) sum(((1 - z) / z)^2)), ncol(x))     scale <- matrix(apply(x, 2, function(z) prod((2 / sqrt(pi)) / z^2)), ncol(x))     exp(-val) * scale }  d <- harness(f = testFn1, fv = testFn1_v,              lowerLimit = rep(0, 3), upperLimit = rep(1, 3), times = 10)  knitr::kable(d, digits = 3)"},{"path":"/articles/cubature.html","id":"discontinuous-function","dir":"Articles","previous_headings":"","what":"Discontinuous function","title":"Cubature Vectorization Results","text":"","code":"testFn2 <- function(x) {     radius <- 0.50124145262344534123412     ifelse(sum(x * x) < radius * radius, 1, 0) }  testFn2_v <- function(x) {     radius <- 0.50124145262344534123412     matrix(apply(x, 2, function(z) ifelse(sum(z * z) < radius * radius, 1, 0)), ncol = ncol(x)) }  d <- harness(which = c(\"hc\", \"hc.v\", \"cc\", \"cc_v\"),              f = testFn2, fv = testFn2_v,              lowerLimit = rep(0, 2), upperLimit = rep(1, 2), times = 10) knitr::kable(d, digits = 3)"},{"path":"/articles/cubature.html","id":"a-simple-polynomial-product-of-coordinates","dir":"Articles","previous_headings":"","what":"A Simple Polynomial (product of coordinates)","title":"Cubature Vectorization Results","text":"","code":"testFn3 <- function(x) prod(2 * x) testFn3_v <- function(x) matrix(apply(x, 2, function(z) prod(2 * z)), ncol = ncol(x))  d <- harness(f = testFn3, fv = testFn3_v,              lowerLimit = rep(0, 3), upperLimit = rep(1, 3), times = 50) knitr::kable(d, digits = 3)"},{"path":"/articles/cubature.html","id":"gaussian-centered-at-frac12","dir":"Articles","previous_headings":"","what":"Gaussian centered at 12\\frac{1}{2}","title":"Cubature Vectorization Results","text":"","code":"testFn4 <- function(x) {     a <- 0.1     s <- sum((x - 0.5)^2)     ((2 / sqrt(pi)) / (2. * a))^length(x) * exp (-s / (a * a)) }  testFn4_v <- function(x) {     a <- 0.1     r <- apply(x, 2, function(z) {         s <- sum((z - 0.5)^2)         ((2 / sqrt(pi)) / (2. * a))^length(z) * exp (-s / (a * a))     })     matrix(r, ncol = ncol(x)) }  d <- harness(f = testFn4, fv = testFn4_v,              lowerLimit = rep(0, 2), upperLimit = rep(1, 2), times = 20) knitr::kable(d, digits = 3)"},{"path":"/articles/cubature.html","id":"double-gaussian","dir":"Articles","previous_headings":"","what":"Double Gaussian","title":"Cubature Vectorization Results","text":"","code":"testFn5 <- function(x) {     a <- 0.1     s1 <- sum((x - 1 / 3)^2)     s2 <- sum((x - 2 / 3)^2)     0.5 * ((2 / sqrt(pi)) / (2. * a))^length(x) * (exp(-s1 / (a * a)) + exp(-s2 / (a * a))) } testFn5_v <- function(x) {     a <- 0.1     r <- apply(x, 2, function(z) {         s1 <- sum((z - 1 / 3)^2)         s2 <- sum((z - 2 / 3)^2)         0.5 * ((2 / sqrt(pi)) / (2. * a))^length(z) * (exp(-s1 / (a * a)) + exp(-s2 / (a * a)))     })     matrix(r, ncol = ncol(x)) }  d <- harness(f = testFn5, fv = testFn5_v,              lowerLimit = rep(0, 2), upperLimit = rep(1, 2), times = 20) knitr::kable(d, digits = 3)"},{"path":"/articles/cubature.html","id":"tsudas-example","dir":"Articles","previous_headings":"","what":"Tsuda’s Example","title":"Cubature Vectorization Results","text":"","code":"testFn6 <- function(x) {     a <- (1 + sqrt(10.0)) / 9.0     prod( a / (a + 1) * ((a + 1) / (a + x))^2) }  testFn6_v <- function(x) {     a <- (1 + sqrt(10.0)) / 9.0     r <- apply(x, 2, function(z) prod( a / (a + 1) * ((a + 1) / (a + z))^2))     matrix(r, ncol = ncol(x)) }  d <- harness(f = testFn6, fv = testFn6_v,              lowerLimit = rep(0, 3), upperLimit = rep(1, 3), times = 20) knitr::kable(d, digits = 3)"},{"path":"/articles/cubature.html","id":"morokoff-calflish-example","dir":"Articles","previous_headings":"","what":"Morokoff & Calflish Example","title":"Cubature Vectorization Results","text":"","code":"testFn7 <- function(x) {     n <- length(x)     p <- 1/n     (1 + p)^n * prod(x^p) } testFn7_v <- function(x) {     matrix(apply(x, 2, function(z) {         n <- length(z)         p <- 1/n         (1 + p)^n * prod(z^p)     }), ncol = ncol(x)) }  d <- harness(f = testFn7, fv = testFn7_v,              lowerLimit = rep(0, 3), upperLimit = rep(1, 3), times = 20) knitr::kable(d, digits = 3)"},{"path":"/articles/cubature.html","id":"wang-landau-sampling-1d-2d-examples","dir":"Articles","previous_headings":"","what":"Wang-Landau Sampling 1d, 2d Examples","title":"Cubature Vectorization Results","text":"","code":"I.1d <- function(x) {     sin(4 * x) *         x * ((x * ( x * (x * x - 4) + 1) - 1)) } I.1d_v <- function(x) {     matrix(apply(x, 2, function(z)         sin(4 * z) *         z * ((z * ( z * (z * z - 4) + 1) - 1))),         ncol = ncol(x)) } d <- harness(f = I.1d, fv = I.1d_v,              lowerLimit = -2, upperLimit = 2, times = 100) knitr::kable(d, digits = 3) I.2d <- function(x) {     x1 <- x[1]; x2 <- x[2]     sin(4 * x1 + 1) * cos(4 * x2) * x1 * (x1 * (x1 * x1)^2 - x2 * (x2 * x2 - x1) +2) } I.2d_v <- function(x) {     matrix(apply(x, 2,                  function(z) {                      x1 <- z[1]; x2 <- z[2]                      sin(4 * x1 + 1) * cos(4 * x2) * x1 * (x1 * (x1 * x1)^2 - x2 * (x2 * x2 - x1) +2)                  }),            ncol = ncol(x)) } d <- harness(f = I.2d, fv = I.2d_v,              lowerLimit = rep(-1, 2), upperLimit = rep(1, 2), times = 100) knitr::kable(d, digits = 3)"},{"path":"/articles/cubature.html","id":"implementation-notes","dir":"Articles","previous_headings":"","what":"Implementation Notes","title":"Cubature Vectorization Results","text":"real modification made underlying cubature library use M = 16 rather default M = 19 suggested original author pcubature. allows us comply CRAN package size limits seems work reasonably well tests. Future versions allow customization demand. changes made Cuba library managed Github repo branch: time new release made, update main branch, keep changes Unix platforms branch named R_pkg current main branch. Customization windows done package using Makevars.win script.","code":""},{"path":"/articles/cubature.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Cubature Vectorization Results","text":"recommendations : Vectorize function. time spent pays back enormously. easy examples show . Vectorized hcubature seems good starting point. smooth integrands low dimensions (≤3\\leq 3), pcubature might worth trying . Experiment using production package.","code":""},{"path":"/articles/cubature.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Cubature Vectorization Results","text":"","code":"sessionInfo() ## R version 4.4.1 (2024-06-14) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] mvtnorm_1.2-5  cubature_2.1.1 benchr_0.2.5   ##  ## loaded via a namespace (and not attached): ##  [1] digest_0.6.36      desc_1.4.3         R6_2.5.1           fastmap_1.2.0      ##  [5] xfun_0.45          cachem_1.1.0       knitr_1.48         htmltools_0.5.8.1  ##  [9] rmarkdown_2.27     lifecycle_1.0.4    cli_3.6.3          RcppProgress_0.4.2 ## [13] sass_0.4.9         pkgdown_2.1.0      textshaping_0.4.0  jquerylib_0.1.4    ## [17] systemfonts_1.1.0  compiler_4.4.1     tools_4.4.1        ragg_1.3.2         ## [21] evaluate_0.24.0    bslib_0.7.0        Rcpp_1.0.12        yaml_2.3.9         ## [25] jsonlite_1.8.8     rlang_1.1.4        fs_1.6.4"},{"path":"/articles/version2.html","id":"whats-new","dir":"Articles","previous_headings":"","what":"What’s new","title":"Version 2.0 Notes","text":"Version 2.0 integrates two well-known cubature libraries one place: cubature C library Steven G. Johnson. Cuba C library Thomas Hahn. also provides single function cubintegrate allows one call methods uniform fashion, explain . N.B. One aware cases one library integrate function won’t, cases, provide somewhat different answers. still makes sense depends underlying methodology used.","code":""},{"path":"/articles/version2.html","id":"unified-interface","dir":"Articles","previous_headings":"","what":"Unified Interface","title":"Version 2.0 Notes","text":"Following suggestion Simen Guare, now function cubintegrate can used try various integration methods easily. examples. First try scalar invocation hcubature. can compare Cuba’s cuhre. Cuba routine can take various arguments; see example, help cuhre. arguments can directly passed cubintegrate. many method-specific arguments, may find function default_args() useful.","code":"library(cubature) m <- 3 sigma <- diag(3) sigma[2,1] <- sigma[1, 2] <- 3/5 ; sigma[3,1] <- sigma[1, 3] <- 1/3 sigma[3,2] <- sigma[2, 3] <- 11/15 logdet <- sum(log(eigen(sigma, symmetric = TRUE, only.values = TRUE)$values)) my_dmvnorm <- function (x, mean, sigma, logdet) {     x <- matrix(x, ncol = length(x))     distval <- stats::mahalanobis(x, center = mean, cov = sigma)     exp(-(3 * log(2 * pi) + logdet + distval)/2) } cubintegrate(f = my_dmvnorm, lower = rep(-0.5, 3), upper = c(1, 4, 2), method = \"pcubature\",              mean = rep(0, m), sigma = sigma, logdet = logdet) ## $integral ## [1] 0.3341125 ##  ## $error ## [1] 2.21207e-06 ##  ## $neval ## [1] 4913 ##  ## $returnCode ## [1] 0 cubintegrate(f = my_dmvnorm, lower = rep(-0.5, 3), upper = c(1, 4, 2), method = \"cuhre\",              mean = rep(0, m), sigma = sigma, logdet = logdet) ## $integral ## [1] 0.3341125 ##  ## $error ## [1] 2.226266e-06 ##  ## $nregions ## [1] 19 ##  ## $neval ## [1] 4699 ##  ## $prob ## [1] 0 ##  ## $returnCode ## [1] 0 cubintegrate(f = my_dmvnorm, lower = rep(-0.5, 3), upper = c(1, 4, 2), method = \"cuhre\",              mean = rep(0, m), sigma = sigma, logdet = logdet,              flags = list(verbose = 2)) ## $integral ## [1] 0.3341125 ##  ## $error ## [1] 2.226266e-06 ##  ## $nregions ## [1] 19 ##  ## $neval ## [1] 4699 ##  ## $prob ## [1] 0 ##  ## $returnCode ## [1] 0 str(default_args()) ## List of 6 ##  $ hcubature:List of 1 ##   ..$ norm: chr [1:5] \"INDIVIDUAL\" \"PAIRED\" \"L2\" \"L1\" ... ##  $ pcubature:List of 1 ##   ..$ norm: chr [1:5] \"INDIVIDUAL\" \"PAIRED\" \"L2\" \"L1\" ... ##  $ cuhre    :List of 4 ##   ..$ minEval  : int 0 ##   ..$ stateFile: NULL ##   ..$ flags    :List of 6 ##   .. ..$ verbose   : int 0 ##   .. ..$ final     : int 1 ##   .. ..$ smooth    : int 0 ##   .. ..$ keep_state: int 0 ##   .. ..$ load_state: int 0 ##   .. ..$ level     : int 0 ##   ..$ key      : int 0 ##  $ divonne  :List of 14 ##   ..$ minEval     : int 0 ##   ..$ stateFile   : NULL ##   ..$ flags       :List of 6 ##   .. ..$ verbose   : int 0 ##   .. ..$ final     : int 1 ##   .. ..$ smooth    : int 0 ##   .. ..$ keep_state: int 0 ##   .. ..$ load_state: int 0 ##   .. ..$ level     : int 0 ##   ..$ rngSeed     : int 0 ##   ..$ key1        : int 47 ##   ..$ key2        : int 1 ##   ..$ key3        : int 1 ##   ..$ maxPass     : int 5 ##   ..$ border      : num 0 ##   ..$ maxChisq    : num 10 ##   ..$ minDeviation: num 0.25 ##   ..$ xGiven      : NULL ##   ..$ nExtra      : int 0 ##   ..$ peakFinder  : NULL ##  $ sauve    :List of 7 ##   ..$ minEval  : int 0 ##   ..$ stateFile: NULL ##   ..$ flags    :List of 6 ##   .. ..$ verbose   : int 0 ##   .. ..$ final     : int 1 ##   .. ..$ smooth    : int 0 ##   .. ..$ keep_state: int 0 ##   .. ..$ load_state: int 0 ##   .. ..$ level     : int 0 ##   ..$ rngSeed  : int 0 ##   ..$ nNew     : int 1000 ##   ..$ nMin     : int 50 ##   ..$ flatness : num 50 ##  $ vegas    :List of 8 ##   ..$ minEval  : int 0 ##   ..$ stateFile: NULL ##   ..$ flags    :List of 6 ##   .. ..$ verbose   : int 0 ##   .. ..$ final     : int 1 ##   .. ..$ smooth    : int 0 ##   .. ..$ keep_state: int 0 ##   .. ..$ load_state: int 0 ##   .. ..$ level     : int 0 ##   ..$ rngSeed  : int 0 ##   ..$ nStart   : int 1000 ##   ..$ nIncrease: int 500 ##   ..$ nBatch   : int 1000 ##   ..$ gridNo   : int 0"},{"path":"/articles/version2.html","id":"vectorization","dir":"Articles","previous_headings":"","what":"Vectorization","title":"Version 2.0 Notes","text":"cubintegrate provides vector intefaces : parameter nVec default 1, indicating scalar interface. value > 1 results vectorized call. f constructed appropriately, thus: , two underlying C libraries differ. cubature library manages number points used vectorization dynamically number can even vary call call. value nVec greater 1 merely flag use vectorization. Cuba C library hand, use actual value nVec.","code":"my_dmvnorm_v <- function (x, mean, sigma, logdet) {     distval <- stats::mahalanobis(t(x), center = mean, cov = sigma)     exp(matrix(-(3 * log(2 * pi) + logdet + distval)/2, ncol = ncol(x))) } cubintegrate(f = my_dmvnorm_v, lower = rep(-0.5, 3), upper = c(1, 4, 2), method = \"pcubature\",              mean = rep(0, m), sigma = sigma, logdet = logdet,              nVec = 128) ## $integral ## [1] 0.3341125 ##  ## $error ## [1] 2.21207e-06 ##  ## $neval ## [1] 4913 ##  ## $returnCode ## [1] 0 cubintegrate(f = my_dmvnorm_v, lower = rep(-0.5, 3), upper = c(1, 4, 2), method = \"cuhre\",              mean = rep(0, m), sigma = sigma, logdet = logdet,              nVec = 128) ## $integral ## [1] 0.3341125 ##  ## $error ## [1] 2.226266e-06 ##  ## $nregions ## [1] 19 ##  ## $neval ## [1] 4699 ##  ## $prob ## [1] 0 ##  ## $returnCode ## [1] 0"},{"path":"/articles/version2.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Version 2.0 Notes","text":"","code":"sessionInfo() ## R version 4.4.1 (2024-06-14) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] cubature_2.1.1 ##  ## loaded via a namespace (and not attached): ##  [1] digest_0.6.36     desc_1.4.3        R6_2.5.1          fastmap_1.2.0     ##  [5] xfun_0.45         cachem_1.1.0      knitr_1.48        htmltools_0.5.8.1 ##  [9] rmarkdown_2.27    lifecycle_1.0.4   cli_3.6.3         sass_0.4.9        ## [13] pkgdown_2.1.0     textshaping_0.4.0 jquerylib_0.1.4   systemfonts_1.1.0 ## [17] compiler_4.4.1    tools_4.4.1       ragg_1.3.2        evaluate_0.24.0   ## [21] bslib_0.7.0       Rcpp_1.0.12       yaml_2.3.9        jsonlite_1.8.8    ## [25] rlang_1.1.4       fs_1.6.4"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Balasubramanian Narasimhan. Author, maintainer. Manuel Koller. Contributor. Steven G. Johnson. Author. Thomas Hahn. Author. Annie Bouvier. Author. Kiên Kiêu. Author. Simen Gaure. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Narasimhan B, Johnson SG, Hahn T, Bouvier , Kiêu K (2024). cubature: Adaptive Multivariate Integration Hypercubes. R package version 2.1.1, https://bnaras.github.io/cubature/.","code":"@Manual{,   title = {cubature: Adaptive Multivariate Integration over Hypercubes},   author = {Balasubramanian Narasimhan and Steven G. Johnson and Thomas Hahn and Annie Bouvier and Kiên Kiêu},   year = {2024},   note = {R package version 2.1.1},   url = {https://bnaras.github.io/cubature/}, }"},{"path":"/index.html","id":"cubature","dir":"","previous_headings":"","what":"Adaptive Multivariate Integration over Hypercubes","title":"Adaptive Multivariate Integration over Hypercubes","text":"Cubature R package adaptive multivariate integration hypercubes using deterministic Monte Carlo methods. package provides wrappers around two C libraries: cubature C library Steven G. Johnson Cuba C library Thomas Hahn scalar vectorized interfaces available routines. R users gain lot using vectorization demonstrated included vignette.","code":""},{"path":"/index.html","id":"dedication","dir":"","previous_headings":"","what":"Dedication","title":"Adaptive Multivariate Integration over Hypercubes","text":"Version 2.0 dedicated memory Kiên Kiêu, one original authors R2Cuba. (BN) never knew , package derives work R2Cuba.","code":""},{"path":"/reference/cubature-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Cubature is a package for adaptive and monte-carlo multidimensional integration over hypercubes — cubature-package","title":"Cubature is a package for adaptive and monte-carlo multidimensional integration over hypercubes — cubature-package","text":"Cubature package adaptive monte-carlo multidimensional integration hypercubes. wrapper around pure C, GPLed implementations Steven G. Johnson (cubature) Thomas Hahn (Cuba) libraries.","code":""},{"path":[]},{"path":"/reference/cubature-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cubature is a package for adaptive and monte-carlo multidimensional integration over hypercubes — cubature-package","text":"C code Steven G. Johnson Thomas Hahn, R Balasubramanian Narasimhan, Manuel Koller, Simen Gaure, Kiên Kiêu, Annie Bouvier Maintainer: Balasubramanian Narasimhannaras@stat.stanford.edu","code":""},{"path":"/reference/cubintegrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Unified Cubature Integration Interface — cubintegrate","title":"Unified Cubature Integration Interface — cubintegrate","text":"Integrate function within specified limits using method specified. arguments specific method well arguments f may passed. defaults used method, see help method default_args().","code":""},{"path":"/reference/cubintegrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unified Cubature Integration Interface — cubintegrate","text":"","code":"cubintegrate(   f,   lower,   upper,   fDim = 1,   method = c(\"hcubature\", \"pcubature\", \"cuhre\", \"divonne\", \"suave\", \"vegas\"),   relTol = 1e-05,   absTol = 1e-12,   maxEval = 10^6,   nVec = 1L,   ... )"},{"path":"/reference/cubintegrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unified Cubature Integration Interface — cubintegrate","text":"f function (integrand) integrated. Can vectorized version, additional arguments ... must indicate via either vectorInterface = TRUE hcubature pcubature, value nVec. See details method. lower lower limit integration, vector hypercubes. upper upper limit integration, vector hypercubes. fDim number components f, default 1, bears relation dimension hypercube integration performed. method method use one \"hcubature\", \"pcubature\", \"cuhre\", \"divonne\", \"suave\" \"vegas\". relTol maximum tolerance, default 1e-5. absTol absolute tolerance, default 1e-12. maxEval maximum number function evaluations needed, default 10^6.  Note actual number function evaluations performed approximately guaranteed exceed number. nVec number vectorization points Cuba C library, default 1, can set integer > 1 vectorization, example, 1024. function f needs handle vector points appropriately; see vignette examples. Unlike Cuba, cubature C library manages number points can vary calls. Therefore, value nVec greater one implies vectorization cubature method. ... arguments may include integration method specific parameters f. Unrecognized parameters integration method presumed intended f processed.","code":""},{"path":"/reference/cubintegrate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unified Cubature Integration Interface — cubintegrate","text":"returned value list items: integral value integral error estimated absolute error neval number times function evaluated returnCode actual integer return code C routine; non-zero value usually indicates problems; interpretation depends method nregions forcCuba routines, actual number subregions needed prob \\(\\chi^2\\)-probability (\\(\\chi^2\\)-value !) error reliable estimate true integration error.","code":""},{"path":[]},{"path":"/reference/cubintegrate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unified Cubature Integration Interface — cubintegrate","text":"","code":"I.1d <- function(x) {   sin(4*x) *     x * ((x * ( x * (x*x-4) + 1) - 1)) } I.1d_v <- function(x) {    matrix(apply(x, 2, function(z)        sin(4 * z) *        z * ((z * ( z * (z * z - 4) + 1) - 1))),        ncol = ncol(x)) } cubintegrate(f = I.1d, lower = -2, upper = 2, method = \"pcubature\") #> $integral #> [1] 1.635644 #>  #> $error #> [1] 1.332268e-15 #>  #> $neval #> [1] 65 #>  #> $returnCode #> [1] 0 #>  cubintegrate(f = I.1d, lower = -2, upper = 2, method = \"cuhre\", flags=list(verbose = 2)) #> $integral #> [1] 1.635644 #>  #> $error #> [1] 1.518009e-05 #>  #> $nregions #> [1] 12 #>  #> $neval #> [1] 253 #>  #> $prob #> [1] 0 #>  #> $returnCode #> [1] 0 #>  cubintegrate(f = I.1d_v, lower = -2, upper = 2, method = \"hcubature\", nVec = 2L) #> $integral #> [1] 1.635644 #>  #> $error #> [1] 4.024021e-09 #>  #> $neval #> [1] 105 #>  #> $returnCode #> [1] 0 #>  cubintegrate(f = I.1d_v, lower = -2, upper = 2, method = \"cuhre\", nVec = 128L) #> $integral #> [1] 1.635644 #>  #> $error #> [1] 1.518009e-05 #>  #> $nregions #> [1] 12 #>  #> $neval #> [1] 253 #>  #> $prob #> [1] 0 #>  #> $returnCode #> [1] 0 #>"},{"path":"/reference/cuhre.html","id":null,"dir":"Reference","previous_headings":"","what":"Integration by a Deterministic Iterative Adaptive Algorithm — cuhre","title":"Integration by a Deterministic Iterative Adaptive Algorithm — cuhre","text":"Implement deterministic algorithm multidimensional numerical integration. algorithm uses one several cubature rules globally adaptive subdivision scheme.  subdivision algorithm similar suave().","code":""},{"path":"/reference/cuhre.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integration by a Deterministic Iterative Adaptive Algorithm — cuhre","text":"","code":"cuhre(   f,   nComp = 1L,   lowerLimit,   upperLimit,   ...,   relTol = 1e-05,   absTol = 1e-12,   minEval = 0L,   maxEval = 10^6,   flags = list(verbose = 0L, final = 1L, keep_state = 0L, level = 0L),   key = 0L,   nVec = 1L,   stateFile = NULL )"},{"path":"/reference/cuhre.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integration by a Deterministic Iterative Adaptive Algorithm — cuhre","text":"f function (integrand) integrated. cuhre, can something simple function single argument, say x. nComp number components f, default 1, bears relation dimension hypercube integration performed. lowerLimit lower limit integration, vector hypercubes. upperLimit upper limit integration, vector hypercubes. ... arguments passed function f. relTol maximum tolerance, default 1e-5. absTol absolute tolerance, default 1e-12. minEval minimum number function evaluations required maxEval maximum number function evaluations needed, default 10^6.  Note actual number function evaluations performed approximately guaranteed exceed number. flags flags governing integration. list exhaustive keep documentation invocation uniform, flags may used particular method noted .  List components: verbose encodes verbosity level, 0 (default) 3.  Level 0 print output, level 1 prints reasonable information progress integration, level 2 also echoes input parameters, level 3 prints subregion results. final 0, sets samples collected subregion various iterations phases contribute final result.  1, last (largest) set samples used final result. smooth Applies Suave Vegas . 0, apply additional smoothing importance function, moderately improves convergence many integrands.  1, use importance function without smoothing, chosen integrand sharp edges. keep_state nonzero, retain state file argument stateFile non-null, else delete stateFile specified. load_state Applies Vegas . Reset integrator state even state file present, .e. keep grid. Together keep_state allows grid adapted one integration used another integrand. level applies Divonne, Suave Vegas. 0, Mersenne Twister random numbers used. nonzero Ranlux random numbers used, except rngSeed zero forces use Sobol quasi-random numbers. Ranlux implements Marsaglia Zaman's 24-bit RCARRY algorithm generation period \\(p\\), .e. every 24 generated numbers used, another \\(p-24\\) skipped. luxury level Ranlux generator may encoded level follows: Level 1 (p = 48) gives long period, passes gap test fails spectral test Level 2 (p = 97) passes known tests, theoretically still defective Level 3 (p = 223) theoretically possible correlations small chance observed Level 4 (p = 389) highest possible luxury, 24 bits chaotic Levels 5-23 default 3, values 24 directly specify period p. Note Ranlux's original level 0, (mis)used selecting Mersenne Twister Cuba, equivalent level = 24 key quadrature rule key: key = 7, 9, 11, 13 selects cubature rule degree key. Note degree-11 rule available 3 dimensions, degree-13 rule 2 dimensions.  values, including default 0, rule degree-13 rule 2 dimensions, degree-11 rule 3 dimensions, degree-9 rule otherwise. nVec number vectorization points, default 1, can set integer > 1 vectorization, example, 1024 function f needs handle vector points appropriately. See vignette examples. stateFile name external file. Vegas can store entire internal state (.e. information resume interrupted integration) external file.  state file updated every iteration. , subsequent invocation, Vegas finds file specified name, loads internal state continues point left . Needless say, using existing state file different integrand generally leads wrong results. integration finishes successfully, .e. prescribed accuracy attained, state file removed. feature useful mainly define ‘check-points’ long-running integrations calculation can restarted.","code":""},{"path":"/reference/cuhre.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integration by a Deterministic Iterative Adaptive Algorithm — cuhre","text":"list components: neval actual number integrand evaluations needed returnCode zero, desired accuracy reached, -1, dimension range, 1, accuracy goal met within allowed maximum number integrand evaluations. integral vector length nComp; integral integrand hypercube error vector length nComp; presumed absolute error integral prob vector length nComp; \\(\\chi^2\\)-probability (\\(\\chi^2\\)-value !) error reliable estimate true integration error.","code":""},{"path":"/reference/cuhre.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Integration by a Deterministic Iterative Adaptive Algorithm — cuhre","text":"See details documentation.","code":""},{"path":"/reference/cuhre.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Integration by a Deterministic Iterative Adaptive Algorithm — cuhre","text":"J. Berntsen, T. O. Espelid (1991) adaptive algorithm approximate calculation multiple integrals. ACM Transactions Mathematical Software, 17(4), 437-451. T. Hahn (2005) CUBA-library multidimensional numerical integration. Computer Physics Communications, 168, 78-95. See https://feynarts.de/cuba/","code":""},{"path":[]},{"path":"/reference/cuhre.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integration by a Deterministic Iterative Adaptive Algorithm — cuhre","text":"","code":"integrand <- function(arg) {   x <- arg[1]   y <- arg[2]   z <- arg[3]   ff <- sin(x)*cos(y)*exp(z); return(ff) } # End integrand  NDIM <- 3 NCOMP <- 1 cuhre(f = integrand,       lowerLimit = rep(0, NDIM),       upperLimit = rep(1, NDIM),       relTol = 1e-3, absTol= 1e-12,       flags = list(verbose = 2, final = 0)) #> $integral #> [1] 0.6646697 #>  #> $error #> [1] 3.33018e-11 #>  #> $nregions #> [1] 2 #>  #> $neval #> [1] 381 #>  #> $prob #> [1] 0 #>  #> $returnCode #> [1] 0 #>"},{"path":"/reference/default_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Default arguments for each integration method — default_args","title":"Default arguments for each integration method — default_args","text":"Since method different set parameters, function returns default values parameters can modified passed integration routines.","code":""},{"path":"/reference/default_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default arguments for each integration method — default_args","text":"","code":"default_args()"},{"path":"/reference/default_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default arguments for each integration method — default_args","text":"named list parameters method.","code":""},{"path":"/reference/default_args.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default arguments for each integration method — default_args","text":"","code":"default_args() #> $hcubature #> $hcubature$norm #> [1] \"INDIVIDUAL\" \"PAIRED\"     \"L2\"         \"L1\"         \"LINF\"       #>  #>  #> $pcubature #> $pcubature$norm #> [1] \"INDIVIDUAL\" \"PAIRED\"     \"L2\"         \"L1\"         \"LINF\"       #>  #>  #> $cuhre #> $cuhre$minEval #> [1] 0 #>  #> $cuhre$stateFile #> NULL #>  #> $cuhre$flags #> $cuhre$flags$verbose #> [1] 0 #>  #> $cuhre$flags$final #> [1] 1 #>  #> $cuhre$flags$smooth #> [1] 0 #>  #> $cuhre$flags$keep_state #> [1] 0 #>  #> $cuhre$flags$load_state #> [1] 0 #>  #> $cuhre$flags$level #> [1] 0 #>  #>  #> $cuhre$key #> [1] 0 #>  #>  #> $divonne #> $divonne$minEval #> [1] 0 #>  #> $divonne$stateFile #> NULL #>  #> $divonne$flags #> $divonne$flags$verbose #> [1] 0 #>  #> $divonne$flags$final #> [1] 1 #>  #> $divonne$flags$smooth #> [1] 0 #>  #> $divonne$flags$keep_state #> [1] 0 #>  #> $divonne$flags$load_state #> [1] 0 #>  #> $divonne$flags$level #> [1] 0 #>  #>  #> $divonne$rngSeed #> [1] 0 #>  #> $divonne$key1 #> [1] 47 #>  #> $divonne$key2 #> [1] 1 #>  #> $divonne$key3 #> [1] 1 #>  #> $divonne$maxPass #> [1] 5 #>  #> $divonne$border #> [1] 0 #>  #> $divonne$maxChisq #> [1] 10 #>  #> $divonne$minDeviation #> [1] 0.25 #>  #> $divonne$xGiven #> NULL #>  #> $divonne$nExtra #> [1] 0 #>  #> $divonne$peakFinder #> NULL #>  #>  #> $sauve #> $sauve$minEval #> [1] 0 #>  #> $sauve$stateFile #> NULL #>  #> $sauve$flags #> $sauve$flags$verbose #> [1] 0 #>  #> $sauve$flags$final #> [1] 1 #>  #> $sauve$flags$smooth #> [1] 0 #>  #> $sauve$flags$keep_state #> [1] 0 #>  #> $sauve$flags$load_state #> [1] 0 #>  #> $sauve$flags$level #> [1] 0 #>  #>  #> $sauve$rngSeed #> [1] 0 #>  #> $sauve$nNew #> [1] 1000 #>  #> $sauve$nMin #> [1] 50 #>  #> $sauve$flatness #> [1] 50 #>  #>  #> $vegas #> $vegas$minEval #> [1] 0 #>  #> $vegas$stateFile #> NULL #>  #> $vegas$flags #> $vegas$flags$verbose #> [1] 0 #>  #> $vegas$flags$final #> [1] 1 #>  #> $vegas$flags$smooth #> [1] 0 #>  #> $vegas$flags$keep_state #> [1] 0 #>  #> $vegas$flags$load_state #> [1] 0 #>  #> $vegas$flags$level #> [1] 0 #>  #>  #> $vegas$rngSeed #> [1] 0 #>  #> $vegas$nStart #> [1] 1000 #>  #> $vegas$nIncrease #> [1] 500 #>  #> $vegas$nBatch #> [1] 1000 #>  #> $vegas$gridNo #> [1] 0 #>  #>"},{"path":"/reference/divonne.html","id":null,"dir":"Reference","previous_headings":"","what":"Integration by Stratified Sampling for Variance Reduction — divonne","title":"Integration by Stratified Sampling for Variance Reduction — divonne","text":"Divonne works stratified sampling, partioning integration region aided methods numerical optimization.","code":""},{"path":"/reference/divonne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integration by Stratified Sampling for Variance Reduction — divonne","text":"","code":"divonne(   f,   nComp = 1L,   lowerLimit,   upperLimit,   ...,   relTol = 1e-05,   absTol = 1e-12,   minEval = 0L,   maxEval = 10^6,   flags = list(verbose = 0L, final = 1L, keep_state = 0L, level = 0L),   rngSeed = 0L,   nVec = 1L,   key1 = 47L,   key2 = 1L,   key3 = 1L,   maxPass = 5L,   border = 0,   maxChisq = 10,   minDeviation = 0.25,   xGiven = NULL,   nExtra = 0L,   peakFinder = NULL,   stateFile = NULL )"},{"path":"/reference/divonne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integration by Stratified Sampling for Variance Reduction — divonne","text":"f function (integrand) integrated cuhre(). Optionally, function can take additional argument addition variable integrated: - cuba_phase - indicating integration phase: 0 sampling points xgiven 1 partitioning phase 2 final integration phase 3 refinement phase information might useful integrand takes long compute sufficiently accurate approximation integrand available. actual value integral minor importance partitioning phase, instead much dependent peak structure integrand find appropriate tessellation. approximation reproduces peak structure leaving fine details might hence perfectly viable much faster substitute cuba_phase < 2. instances, phase can ignored entirely admissible define integrand without . nComp number components f, default 1, bears relation dimension hypercube integration performed. lowerLimit lower limit integration, vector hypercubes. upperLimit upper limit integration, vector hypercubes. ... arguments passed function f. relTol maximum tolerance, default 1e-5. absTol absolute tolerance, default 1e-12. minEval minimum number function evaluations required maxEval maximum number function evaluations needed, default 10^6.  Note actual number function evaluations performed approximately guaranteed exceed number. flags flags governing integration. list exhaustive keep documentation invocation uniform, flags may used particular method noted .  List components: verbose encodes verbosity level, 0 (default) 3.  Level 0 print output, level 1 prints reasonable information progress integration, level 2 also echoes input parameters, level 3 prints subregion results. final 0, sets samples collected subregion various iterations phases contribute final result.  1, last (largest) set samples used final result. smooth Applies Suave Vegas . 0, apply additional smoothing importance function, moderately improves convergence many integrands.  1, use importance function without smoothing, chosen integrand sharp edges. keep_state nonzero, retain state file argument stateFile non-null, else delete stateFile specified. load_state Applies Vegas . Reset integrator state even state file present, .e. keep grid. Together keep_state allows grid adapted one integration used another integrand. level applies Divonne, Suave Vegas. 0, Mersenne Twister random numbers used. nonzero Ranlux random numbers used, except rngSeed zero forces use Sobol quasi-random numbers. Ranlux implements Marsaglia Zaman's 24-bit RCARRY algorithm generation period \\(p\\), .e. every 24 generated numbers used, another \\(p-24\\) skipped. luxury level Ranlux generator may encoded level follows: Level 1 (p = 48) gives long period, passes gap test fails spectral test Level 2 (p = 97) passes known tests, theoretically still defective Level 3 (p = 223) theoretically possible correlations small chance observed Level 4 (p = 389) highest possible luxury, 24 bits chaotic Levels 5-23 default 3, values 24 directly specify period p. Note Ranlux's original level 0, (mis)used selecting Mersenne Twister Cuba, equivalent level = 24 rngSeed seed, default 0, random number generator. Note articulation level settings flag nVec number vectorization points, default 1, can set integer > 1 vectorization, example, 1024 function f needs handle vector points appropriately. See vignette examples. key1 integer determines sampling partitioning phase: key1 = 7, 9, 11, 13 selects cubature rule degree key1.  Note degree-11 rule available 3 dimensions, degree-13 rule 2 dimensions. values key1, quasi-random sample \\(n=|key1|\\) points used, sign key1 determines type sample, key1 = 0, use default rule. key1 > 0, use Korobov quasi-random sample, key1 < 0, use Sobol quasi-random sample flags$seed zero, otherwise “standard” sample (Mersenne Twister) pseudo-random sample key2 integer determines sampling final integration phase: key1, \\(n=|key2|\\) determines number points, \\(n > 39\\), sample \\(n\\) points, \\(n < 40\\), sample \\(n\\) nneed points, nneed number points needed reach prescribed accuracy, estimated Divonne results partitioning phase. key3 integer sets strategy refinement phase: key3 = 0, treat subregion . key3 = 1, split subregion .  Otherwise, subregion sampled third time key3 specifying sampling parameters exactly key2 . maxPass integer controls thoroughness partitioning phase: partitioning phase terminates estimated total number integrand evaluations (partitioning plus final integration) decrease maxPass successive iterations. decrease points generally indicates Divonne discovered new structures integrand able find effective partitioning. maxPass can understood number “safety” iterations performed partition accepted final counting consequently restarts zero whenever new structures found. border relative width border integration region.  Points falling border region sampled directly, extrapolated two samples interior. Use non-zero border integrand subroutine produce values directly integration boundary. relative width border identical dimensions. example, set border=0.1 border width equal 10\\ width integration region. maxChisq maximum \\(\\chi^2\\) value single subregion allowed final integration phase. Regions fail \\(\\chi^2\\) test whose sample averages differ min.deviation move refinement phase. minDeviation bound, given fraction requested error entire integral, determines whether worthwhile examining region failed \\(\\chi^2\\) test.  two sampling averages obtained region differ bound region treated. xGiven matrix (nDim, nGiven).  list nGiven points integrand might peaks. Divonne consider points partitioning integration region.  idea help integrator find extrema integrand presence narrow peaks. Even approximate location peaks known, can considerably speed convergence. nExtra maximum number extra points peak-finder subroutine return. nextra zero, peakfinder called arbitrary object may passed place, e.g. just 0. peakFinder peak-finder subroutine. R function called whenever region subdivision supposed point possible peaks lying region, thus acting dynamic counterpart static list points supplied xgiven. expected declared peakFinder <- function(bounds, nMax) bounds matrix dimension (2, nDim) contains lower (row 1) upper (row 2) bounds subregion.  returned value matrix (nX, nDim) nX actual number points (less equal nMax). stateFile name external file. Vegas can store entire internal state (.e. information resume interrupted integration) external file.  state file updated every iteration. , subsequent invocation, Vegas finds file specified name, loads internal state continues point left . Needless say, using existing state file different integrand generally leads wrong results. integration finishes successfully, .e. prescribed accuracy attained, state file removed. feature useful mainly define ‘check-points’ long-running integrations calculation can restarted.","code":""},{"path":"/reference/divonne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integration by Stratified Sampling for Variance Reduction — divonne","text":"list components: neval actual number integrand evaluations needed returnCode zero, desired accuracy reached, -1, dimension range, 1, accuracy goal met within allowed maximum number integrand evaluations. integral vector length nComp; integral integrand hypercube error vector length nComp; presumed absolute error integral prob vector length nComp; \\(\\chi^2\\)-probability (\\(\\chi^2\\)-value !) error reliable estimate true integration error.","code":""},{"path":"/reference/divonne.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Integration by Stratified Sampling for Variance Reduction — divonne","text":"Divonne uses stratified sampling variance reduction, , partitions integration region subregions approximately equal value quantity called spread (volume times half-range). See details documentation.","code":""},{"path":"/reference/divonne.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Integration by Stratified Sampling for Variance Reduction — divonne","text":"J. H. Friedman, M. H. Wright (1981) nested partitioning procedure numerical multiple integration. ACM Trans. Math. Software, 7(1), 76-92. J. H. Friedman, M. H. Wright (1981) User's guide DIVONNE. SLAC Report CGTM-193-REV, CGTM-193, Stanford University. T. Hahn (2005) CUBA-library multidimensional numerical integration. Computer Physics Communications, 168, 78-95.","code":""},{"path":[]},{"path":"/reference/divonne.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integration by Stratified Sampling for Variance Reduction — divonne","text":"","code":"integrand <- function(arg, phase) {   x <- arg[1]   y <- arg[2]   z <- arg[3]   ff <- sin(x)*cos(y)*exp(z); return(ff) } divonne(integrand, relTol=1e-3,  absTol=1e-12, lowerLimit = rep(0, 3), upperLimit = rep(1, 3),         flags=list(verbose = 2),  key1= 47) #> $integral #> [1] 0.6646098 #>  #> $error #> [1] 0.0006505917 #>  #> $neval #> [1] 3052 #>  #> $prob #> [1] 1.110223e-16 #>  #> $returnCode #> [1] 0 #>   # Example with a peak-finder function nDim <- 3L peakf <- function(bounds, nMax) { #  print(bounds) # matrix (ndim,2)   x <- matrix(0, ncol = nMax, nrow = nDim)    pas <- 1 / (nMax - 1)    # 1ier point    x[, 1] <- rep(0, nDim)    # Les autres points    for (i in 2L:nMax) {       x[, i] <- x[, (i - 1)] + pas     }   x } #end peakf  divonne(integrand, relTol=1e-3,  absTol=1e-12,         lowerLimit = rep(0, 3), upperLimit = rep(1, 3),         flags=list(verbose = 2),  peakFinder = peakf, nExtra = 4L) #> $integral #> [1] 0.6646098 #>  #> $error #> [1] 0.0006505917 #>  #> $neval #> [1] 3109 #>  #> $prob #> [1] 1.110223e-16 #>  #> $returnCode #> [1] 0 #>"},{"path":"/reference/hcubature.html","id":null,"dir":"Reference","previous_headings":"","what":"Adaptive multivariate integration over hypercubes (hcubature and pcubature) — hcubature","title":"Adaptive multivariate integration over hypercubes (hcubature and pcubature) — hcubature","text":"function performs adaptive multidimensional integration (cubature) (possibly) vector-valued integrands hypercubes. function includes vector interface integrand may evaluated several hundred points single call.","code":""},{"path":"/reference/hcubature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adaptive multivariate integration over hypercubes (hcubature and pcubature) — hcubature","text":"","code":"hcubature(   f,   lowerLimit,   upperLimit,   ...,   tol = 1e-05,   fDim = 1,   maxEval = 0,   absError = .Machine$double.eps * 10^2/2,   doChecking = FALSE,   vectorInterface = FALSE,   norm = c(\"INDIVIDUAL\", \"PAIRED\", \"L2\", \"L1\", \"LINF\") )  pcubature(   f,   lowerLimit,   upperLimit,   ...,   tol = 1e-05,   fDim = 1,   maxEval = 0,   absError = .Machine$double.eps * 10^2,   doChecking = FALSE,   vectorInterface = FALSE,   norm = c(\"INDIVIDUAL\", \"PAIRED\", \"L2\", \"L1\", \"LINF\") )"},{"path":"/reference/hcubature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adaptive multivariate integration over hypercubes (hcubature and pcubature) — hcubature","text":"f function (integrand) integrated lowerLimit lower limit integration, vector hypercubes upperLimit upper limit integration, vector hypercubes ... arguments passed function f tol maximum tolerance, default 1e-5. fDim dimension integrand, default 1, bears relation dimension hypercube maxEval maximum number function evaluations needed, default 0 implying limit. Note actual number function evaluations performed approximately guaranteed exceed number. absError maximum absolute error tolerated, default .Machine$double_eps * 10^2. doChecking version 2.0, flag ignored dropped forthcoming versions vectorInterface flag indicates whether use vector interface default FALSE. See details norm vector-valued integrands, norm specifies norm used measure error determine convergence properties. See .","code":""},{"path":"/reference/hcubature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adaptive multivariate integration over hypercubes (hcubature and pcubature) — hcubature","text":"returned value list four items: integral value integral error estimated absolute error functionEvaluations number times function evaluated returnCode actual integer return code C routine","code":""},{"path":"/reference/hcubature.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adaptive multivariate integration over hypercubes (hcubature and pcubature) — hcubature","text":"function merely calls Johnson's C code returns results. One can specify maximum number function evaluations (default 0 limit).  Otherwise, integration stops estimated error less absolute error requested, estimated error less tol times integral, absolute value, maximum number iterations reached (see parameter info ), whichever earlier. compatibility earlier versions, adaptIntegrate function alias underlying hcubature function uses h-adaptive integration. Otherwise, calling conventions . highly recommend referring vignette achieve best results! hcubature function h-adaptive version recursively partitions integration domain smaller subdomains, applying integration rule , convergence achieved. p-adaptive version, pcubature, repeatedly doubles degree quadrature rules convergence achieved, based tensor product Clenshaw-Curtis quadrature rules. algorithm often superior h-adaptive integration smooth integrands (<=3) dimensions, poor choice higher dimensions non-smooth integrands. Compare hcubature also takes arguments. vector interface requires integrand take matrix argument. return value also matrix. number points integrand may evaluated user control: integration routine takes care number may run several hundreds. strongly advise vectorization; see vignette. norm argument irrelevant scalar integrands ignored. Given vectors \\(v\\) \\(e\\) estimated integrals errors therein, respectively, norm argument takes one following values: INDIVIDUAL Convergence achieved integrand (component \\(v\\) \\(e\\)) individually satisfies requested error tolerances L1, L2, LINF absolute error measured \\(|e|\\) relative error \\(|e|/|v|\\), \\(|...|\\) \\(L_1\\), \\(L_2\\), \\(L_{\\infty}\\) norm, respectively PAIRED Like INDIVIDUAL, except integrands grouped consecutive pairs, error tolerance applied \\(L_2\\) sense pair. option mainly useful integrating vectors complex numbers, consecutive pair real integrands real imaginary parts single complex integrand, concern error complex plane rather error real imaginary parts separately","code":""},{"path":"/reference/hcubature.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adaptive multivariate integration over hypercubes (hcubature and pcubature) — hcubature","text":"Balasubramanian Narasimhan","code":""},{"path":"/reference/hcubature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adaptive multivariate integration over hypercubes (hcubature and pcubature) — hcubature","text":"","code":"if (FALSE) { # \\dontrun{ ## Test function 0 ## Compare with original cubature result of ## ./cubature_test 2 1e-4 0 0 ## 2-dim integral, tolerance = 0.0001 ## integrand 0: integral = 0.708073, est err = 1.70943e-05, true err = 7.69005e-09 ## #evals = 17  testFn0 <- function(x) {   prod(cos(x)) }  hcubature(testFn0, rep(0,2), rep(1,2), tol=1e-4)  pcubature(testFn0, rep(0,2), rep(1,2), tol=1e-4)  M_2_SQRTPI <- 2/sqrt(pi)  ## Test function 1 ## Compare with original cubature result of ## ./cubature_test 3 1e-4 1 0 ## 3-dim integral, tolerance = 0.0001 ## integrand 1: integral = 1.00001, est err = 9.67798e-05, true err = 9.76919e-06 ## #evals = 5115  testFn1 <- function(x) {   val <- sum (((1-x) / x)^2)   scale <- prod(M_2_SQRTPI/x^2)   exp(-val) * scale }  hcubature(testFn1, rep(0, 3), rep(1, 3), tol=1e-4) pcubature(testFn1, rep(0, 3), rep(1, 3), tol=1e-4)  ## ## Test function 2 ## Compare with original cubature result of ## ./cubature_test 2 1e-4 2 0 ## 2-dim integral, tolerance = 0.0001 ## integrand 2: integral = 0.19728, est err = 1.97261e-05, true err = 4.58316e-05 ## #evals = 166141  testFn2 <- function(x) {   ## discontinuous objective: volume of hypersphere   radius <- as.double(0.50124145262344534123412)   ifelse(sum(x*x) < radius*radius, 1, 0) }  hcubature(testFn2, rep(0, 2), rep(1, 2), tol=1e-4) pcubature(testFn2, rep(0, 2), rep(1, 2), tol=1e-4)  ## ## Test function 3 ## Compare with original cubature result of ## ./cubature_test 3 1e-4 3 0 ## 3-dim integral, tolerance = 0.0001 ## integrand 3: integral = 1, est err = 0, true err = 2.22045e-16 ## #evals = 33  testFn3 <- function(x) {   prod(2*x) }  hcubature(testFn3, rep(0,3), rep(1,3), tol=1e-4) pcubature(testFn3, rep(0,3), rep(1,3), tol=1e-4)  ## ## Test function 4 (Gaussian centered at 1/2) ## Compare with original cubature result of ## ./cubature_test 2 1e-4 4 0 ## 2-dim integral, tolerance = 0.0001 ## integrand 4: integral = 1, est err = 9.84399e-05, true err = 2.78894e-06 ## #evals = 1853  testFn4 <- function(x) {   a <- 0.1   s <- sum((x - 0.5)^2)   (M_2_SQRTPI / (2. * a))^length(x) * exp (-s / (a * a)) }  hcubature(testFn4, rep(0,2), rep(1,2), tol=1e-4) pcubature(testFn4, rep(0,2), rep(1,2), tol=1e-4)  ## ## Test function 5 (double Gaussian) ## Compare with original cubature result of ## ./cubature_test 3 1e-4 5 0 ## 3-dim integral, tolerance = 0.0001 ## integrand 5: integral = 0.999994, est err = 9.98015e-05, true err = 6.33407e-06 ## #evals = 59631  testFn5 <- function(x) {   a <- 0.1   s1 <- sum((x - 1/3)^2)   s2 <- sum((x - 2/3)^2)   0.5 * (M_2_SQRTPI / (2. * a))^length(x) * (exp(-s1 / (a * a)) + exp(-s2 / (a * a))) }  hcubature(testFn5, rep(0,3), rep(1,3), tol=1e-4) pcubature(testFn5, rep(0,3), rep(1,3), tol=1e-4)  ## ## Test function 6 (Tsuda's example) ## Compare with original cubature result of ## ./cubature_test 4 1e-4 6 0 ## 4-dim integral, tolerance = 0.0001 ## integrand 6: integral = 0.999998, est err = 9.99685e-05, true err = 1.5717e-06 ## #evals = 18753  testFn6 <- function(x) {   a <- (1 + sqrt(10.0)) / 9.0   prod(a / (a + 1) * ((a + 1) / (a + x))^2) }  hcubature(testFn6, rep(0,4), rep(1,4), tol=1e-4) pcubature(testFn6, rep(0,4), rep(1,4), tol=1e-4)   ## ## Test function 7 ##   test integrand from W. J. Morokoff and R. E. Caflisch, \"Quasi= ##   Monte Carlo integration,\" J. Comput. Phys 122, 218-230 (1995). ##   Designed for integration on [0,1]^dim, integral = 1. */ ## Compare with original cubature result of ## ./cubature_test 3 1e-4 7 0 ## 3-dim integral, tolerance = 0.0001 ## integrand 7: integral = 1.00001, est err = 9.96657e-05, true err = 1.15994e-05 ## #evals = 7887  testFn7 <- function(x) {   n <- length(x)   p <- 1/n   (1 + p)^n * prod(x^p) }  hcubature(testFn7, rep(0,3), rep(1,3), tol=1e-4) pcubature(testFn7, rep(0,3), rep(1,3), tol=1e-4)   ## Example from web page ## http://ab-initio.mit.edu/wiki/index.php/Cubature ## ## f(x) = exp(-0.5(euclidean_norm(x)^2)) over the three-dimensional ## hyperbcube [-2, 2]^3 ## Compare with original cubature result testFnWeb <-  function(x) {   exp(-0.5 * sum(x^2)) }  hcubature(testFnWeb, rep(-2,3), rep(2,3), tol=1e-4) pcubature(testFnWeb, rep(-2,3), rep(2,3), tol=1e-4)  ## Test function I.1d from ## Numerical integration using Wang-Landau sampling ## Y. W. Li, T. Wust, D. P. Landau, H. Q. Lin ## Computer Physics Communications, 2007, 524-529 ## Compare with exact answer: 1.63564436296 ## I.1d <- function(x) {   sin(4*x) *     x * ((x * ( x * (x*x-4) + 1) - 1)) }  hcubature(I.1d, -2, 2, tol=1e-7) pcubature(I.1d, -2, 2, tol=1e-7)  ## Test function I.2d from ## Numerical integration using Wang-Landau sampling ## Y. W. Li, T. Wust, D. P. Landau, H. Q. Lin ## Computer Physics Communications, 2007, 524-529 ## Compare with exact answer: -0.01797992646 ## ## I.2d <- function(x) {   x1 = x[1]   x2 = x[2]   sin(4*x1+1) * cos(4*x2) * x1 * (x1*(x1*x1)^2 - x2*(x2*x2 - x1) +2) }  hcubature(I.2d, rep(-1, 2), rep(1, 2), maxEval=10000) pcubature(I.2d, rep(-1, 2), rep(1, 2), maxEval=10000)  ## ## Example of multivariate normal integration borrowed from ## package mvtnorm (on CRAN) to check ... argument ## Compare with output of ## pmvnorm(lower=rep(-0.5, m), upper=c(1,4,2), mean=rep(0, m), corr=sigma, alg=Miwa()) ##     0.3341125.  Blazing quick as well!  Ours is, not unexpectedly, much slower. ## dmvnorm <- function (x, mean, sigma, log = FALSE) {     if (is.vector(x)) {         x <- matrix(x, ncol = length(x))     }     if (missing(mean)) {         mean <- rep(0, length = ncol(x))     }     if (missing(sigma)) {         sigma <- diag(ncol(x))     }     if (NCOL(x) != NCOL(sigma)) {         stop(\"x and sigma have non-conforming size\")     }     if (!isSymmetric(sigma, tol = sqrt(.Machine$double.eps),         check.attributes = FALSE)) {         stop(\"sigma must be a symmetric matrix\")     }     if (length(mean) != NROW(sigma)) {         stop(\"mean and sigma have non-conforming size\")     }     distval <- mahalanobis(x, center = mean, cov = sigma)     logdet <- sum(log(eigen(sigma, symmetric = TRUE, only.values = TRUE)$values))     logretval <- -(ncol(x) * log(2 * pi) + logdet + distval)/2     if (log)         return(logretval)     exp(logretval) }  m <- 3 sigma <- diag(3) sigma[2,1] <- sigma[1, 2] <- 3/5 ; sigma[3,1] <- sigma[1, 3] <- 1/3 sigma[3,2] <- sigma[2, 3] <- 11/15 hcubature(dmvnorm, lower=rep(-0.5, m), upper=c(1,4,2),                         mean=rep(0, m), sigma=sigma, log=FALSE,                maxEval=10000) pcubature(dmvnorm, lower=rep(-0.5, m), upper=c(1,4,2),                         mean=rep(0, m), sigma=sigma, log=FALSE,                maxEval=10000) } # }"},{"path":"/reference/suave.html","id":null,"dir":"Reference","previous_headings":"","what":"Integration with SUbregion-Adaptive Vegas Algorithm — suave","title":"Integration with SUbregion-Adaptive Vegas Algorithm — suave","text":"Suave uses vegas()-like importance sampling combined globally adaptive subdivision strategy: requested accuracy reached, region largest error time bisected dimension fluctuations integrand reduced . number new samples half prorated fluctuation half.","code":""},{"path":"/reference/suave.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integration with SUbregion-Adaptive Vegas Algorithm — suave","text":"","code":"suave(   f,   nComp = 1L,   lowerLimit,   upperLimit,   ...,   relTol = 1e-05,   absTol = 1e-12,   minEval = 0L,   maxEval = 10^6,   flags = list(verbose = 0L, final = 1L, smooth = 0L, keep_state = 0L, level = 0L),   rngSeed = 0L,   nVec = 1L,   nNew = 1000L,   nMin = 50L,   flatness = 50,   stateFile = NULL )"},{"path":"/reference/suave.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integration with SUbregion-Adaptive Vegas Algorithm — suave","text":"f function (integrand) integrated cuhre(). Optionally, function can take two additional arguments addition variable integrated: - cuba_weight weight point sampled, - cuba_iter current iteration number. function author may choose use appropriate way ignore altogether. nComp number components f, default 1, bears relation dimension hypercube integration performed. lowerLimit lower limit integration, vector hypercubes. upperLimit upper limit integration, vector hypercubes. ... arguments passed function f. relTol maximum tolerance, default 1e-5. absTol absolute tolerance, default 1e-12. minEval minimum number function evaluations required maxEval maximum number function evaluations needed, default 10^6.  Note actual number function evaluations performed approximately guaranteed exceed number. flags flags governing integration. list exhaustive keep documentation invocation uniform, flags may used particular method noted .  List components: verbose encodes verbosity level, 0 (default) 3.  Level 0 print output, level 1 prints reasonable information progress integration, level 2 also echoes input parameters, level 3 prints subregion results. final 0, sets samples collected subregion various iterations phases contribute final result.  1, last (largest) set samples used final result. smooth Applies Suave Vegas . 0, apply additional smoothing importance function, moderately improves convergence many integrands.  1, use importance function without smoothing, chosen integrand sharp edges. keep_state nonzero, retain state file argument stateFile non-null, else delete stateFile specified. load_state Applies Vegas . Reset integrator state even state file present, .e. keep grid. Together keep_state allows grid adapted one integration used another integrand. level applies Divonne, Suave Vegas. 0, Mersenne Twister random numbers used. nonzero Ranlux random numbers used, except rngSeed zero forces use Sobol quasi-random numbers. Ranlux implements Marsaglia Zaman's 24-bit RCARRY algorithm generation period \\(p\\), .e. every 24 generated numbers used, another \\(p-24\\) skipped. luxury level Ranlux generator may encoded level follows: Level 1 (p = 48) gives long period, passes gap test fails spectral test Level 2 (p = 97) passes known tests, theoretically still defective Level 3 (p = 223) theoretically possible correlations small chance observed Level 4 (p = 389) highest possible luxury, 24 bits chaotic Levels 5-23 default 3, values 24 directly specify period p. Note Ranlux's original level 0, (mis)used selecting Mersenne Twister Cuba, equivalent level = 24 rngSeed seed, default 0, random number generator. Note articulation level settings flag nVec number vectorization points, default 1, can set integer > 1 vectorization, example, 1024 function f needs handle vector points appropriately. See vignette examples. nNew number new integrand evaluations subdivision. nMin minimum number samples former pass must contribute subregion considered region's compound integral value. Increasing nmin may reduce jumps \\(\\chi^2\\) value. flatness parameter p, type norm used compute fluctuation sample. determines prominently \"outliers,\" .e. individual samples large fluctuation, figure total fluctuation, turn determines region split . suggested name, flatness chosen large \"flat\" integrands small \"volatile\" integrands high peaks. Note since flatness appears exponent, one use large values (say, hundred) lest terms truncated internally prevent overflow. stateFile name external file. Vegas can store entire internal state (.e. information resume interrupted integration) external file.  state file updated every iteration. , subsequent invocation, Vegas finds file specified name, loads internal state continues point left . Needless say, using existing state file different integrand generally leads wrong results. integration finishes successfully, .e. prescribed accuracy attained, state file removed. feature useful mainly define ‘check-points’ long-running integrations calculation can restarted.","code":""},{"path":"/reference/suave.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integration with SUbregion-Adaptive Vegas Algorithm — suave","text":"list components: neval actual number integrand evaluations needed returnCode zero, desired accuracy reached, -1, dimension range, 1, accuracy goal met within allowed maximum number integrand evaluations. integral vector length nComp; integral integrand hypercube error vector length nComp; presumed absolute error integral prob vector length nComp; \\(\\chi^2\\)-probability (\\(\\chi^2\\)-value !) error reliable estimate true integration error.","code":""},{"path":"/reference/suave.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Integration with SUbregion-Adaptive Vegas Algorithm — suave","text":"See details documentation.","code":""},{"path":"/reference/suave.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Integration with SUbregion-Adaptive Vegas Algorithm — suave","text":"T. Hahn (2005) CUBA-library multidimensional numerical integration. Computer Physics Communications, 168, 78-95.","code":""},{"path":[]},{"path":"/reference/suave.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integration with SUbregion-Adaptive Vegas Algorithm — suave","text":"","code":"integrand <- function(arg) {   x <- arg[1]   y <- arg[2]   z <- arg[3]   ff <- sin(x)*cos(y)*exp(z); return(ff) } # end integrand suave(integrand, lowerLimit = rep(0, 3), upperLimit = rep(1, 3),              relTol=1e-3,  absTol=1e-12,              flags=list(verbose=2, final=0)) #> $integral #> [1] 0.6646196 #>  #> $error #> [1] 0.0005809762 #>  #> $neval #> [1] 7000 #>  #> $prob #> [1] 0.2174863 #>  #> $returnCode #> [1] 0 #>"},{"path":"/reference/vegas.html","id":null,"dir":"Reference","previous_headings":"","what":"Integration by a Monte Carlo Algorithm — vegas","title":"Integration by a Monte Carlo Algorithm — vegas","text":"Implement Monte Carlo algorithm multidimensional numerical integration.  algorithm uses importance sampling variance-reduction technique. Vegas iteratively builds piecewise constant weight function, represented rectangular grid. iteration consists sampling step followed refinement grid.","code":""},{"path":"/reference/vegas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integration by a Monte Carlo Algorithm — vegas","text":"","code":"vegas(   f,   nComp = 1L,   lowerLimit,   upperLimit,   ...,   relTol = 1e-05,   absTol = 1e-12,   minEval = 0L,   maxEval = 10^6,   flags = list(verbose = 0L, final = 1L, smooth = 0L, keep_state = 0L, load_state = 0L,     level = 0L),   rngSeed = 12345L,   nVec = 1L,   nStart = 1000L,   nIncrease = 500L,   nBatch = 1000L,   gridNo = 0L,   stateFile = NULL )"},{"path":"/reference/vegas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integration by a Monte Carlo Algorithm — vegas","text":"f function (integrand) integrated cuhre(). Optionally, function can take two additional arguments addition variable integrated: - cuba_weight weight point sampled, - cuba_iter current iteration number. function author may choose use appropriate way ignore altogether. nComp number components f, default 1, bears relation dimension hypercube integration performed. lowerLimit lower limit integration, vector hypercubes. upperLimit upper limit integration, vector hypercubes. ... arguments passed function f. relTol maximum tolerance, default 1e-5. absTol absolute tolerance, default 1e-12. minEval minimum number function evaluations required maxEval maximum number function evaluations needed, default 10^6.  Note actual number function evaluations performed approximately guaranteed exceed number. flags flags governing integration. list exhaustive keep documentation invocation uniform, flags may used particular method noted .  List components: verbose encodes verbosity level, 0 (default) 3.  Level 0 print output, level 1 prints reasonable information progress integration, level 2 also echoes input parameters, level 3 prints subregion results. final 0, sets samples collected subregion various iterations phases contribute final result.  1, last (largest) set samples used final result. smooth Applies Suave Vegas . 0, apply additional smoothing importance function, moderately improves convergence many integrands.  1, use importance function without smoothing, chosen integrand sharp edges. keep_state nonzero, retain state file argument stateFile non-null, else delete stateFile specified. load_state Applies Vegas . Reset integrator state even state file present, .e. keep grid. Together keep_state allows grid adapted one integration used another integrand. level applies Divonne, Suave Vegas. 0, Mersenne Twister random numbers used. nonzero Ranlux random numbers used, except rngSeed zero forces use Sobol quasi-random numbers. Ranlux implements Marsaglia Zaman's 24-bit RCARRY algorithm generation period \\(p\\), .e. every 24 generated numbers used, another \\(p-24\\) skipped. luxury level Ranlux generator may encoded level follows: Level 1 (p = 48) gives long period, passes gap test fails spectral test Level 2 (p = 97) passes known tests, theoretically still defective Level 3 (p = 223) theoretically possible correlations small chance observed Level 4 (p = 389) highest possible luxury, 24 bits chaotic Levels 5-23 default 3, values 24 directly specify period p. Note Ranlux's original level 0, (mis)used selecting Mersenne Twister Cuba, equivalent level = 24 rngSeed seed, default 0, random number generator. Note articulation level settings flag nVec number vectorization points, default 1, can set integer > 1 vectorization, example, 1024 function f needs handle vector points appropriately. See vignette examples. nStart number integrand evaluations per iteration start . nIncrease increase number integrand evaluations per iteration. j-th iteration evaluates integrand nStart+(j-1)*nincrease points. nBatch Vegas samples points , batches predetermined size, avoid excessive memory consumption. nbatch number points sampled batch. Tuning number usually necessary performance affected significantly far batch samples fits CPU cache. gridNo integer.  Vegas may accelerate convergence keep grid accumulated one integration next one, integrands reasonably similar . Vegas maintains internal table space ten grids purpose.  gridno number 1 10, grid discarded end integration, stored respective slot table future invocation. grid re-used dimension subsequent integration one originates . repeated invocations may become necessary flush slot memory. case negative grid number set. Vegas start new grid also restore grid number positive value, end integration grid stored indicated slot. stateFile name external file. Vegas can store entire internal state (.e. information resume interrupted integration) external file.  state file updated every iteration. , subsequent invocation, Vegas finds file specified name, loads internal state continues point left . Needless say, using existing state file different integrand generally leads wrong results. integration finishes successfully, .e. prescribed accuracy attained, state file removed. feature useful mainly define ‘check-points’ long-running integrations calculation can restarted.","code":""},{"path":"/reference/vegas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integration by a Monte Carlo Algorithm — vegas","text":"list components: neval actual number integrand evaluations needed returnCode zero, desired accuracy reached, -1, dimension range, 1, accuracy goal met within allowed maximum number integrand evaluations. integral vector length nComp; integral integrand hypercube error vector length nComp; presumed absolute error integral prob vector length nComp; \\(\\chi^2\\)-probability (\\(\\chi^2\\)-value !) error reliable estimate true integration error.","code":""},{"path":"/reference/vegas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Integration by a Monte Carlo Algorithm — vegas","text":"See details documentation.","code":""},{"path":"/reference/vegas.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Integration by a Monte Carlo Algorithm — vegas","text":"G. P. Lepage (1978) new algorithm adaptive multidimensional integration. J. Comput. Phys., 27, 192-210. G. P. Lepage (1980) VEGAS - adaptive multi-dimensional integration program. Research Report CLNS-80/447. Cornell University, Ithaca, N.-Y. T. Hahn (2005) CUBA-library multidimensional numerical integration. Computer Physics Communications, 168, 78-95.","code":""},{"path":[]},{"path":"/reference/vegas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integration by a Monte Carlo Algorithm — vegas","text":"","code":"integrand <- function(arg, weight) {   x <- arg[1]   y <- arg[2]   z <- arg[3]   ff <- sin(x)*cos(y)*exp(z); return(ff) } # end integrand vegas(integrand, lowerLimit = rep(0, 3), upperLimit = rep(1, 3),              relTol=1e-3,  absTol=1e-12,              flags=list(verbose=2, final=0)) #> $integral #> [1] 0.6652311 #>  #> $error #> [1] 0.0006170268 #>  #> $neval #> [1] 13500 #>  #> $prob #> [1] 0.6053001 #>  #> $returnCode #> [1] 0 #>"},{"path":"/news/index.html","id":"cubature-211","dir":"Changelog","previous_headings":"","what":"cubature 2.1.1","title":"cubature 2.1.1","text":"Fix documentation errors shown CRAN checks Change default absError value hcubature, adaptIntegrate, pcubature .Machine$double.eps * 10^2 avoid nontermination, breaking change unfortunately, necessary Address issue raised @jeroen cross-compilation (thanks Jeroen).","code":""},{"path":"/news/index.html","id":"cubature-210","dir":"Changelog","previous_headings":"","what":"cubature 2.1.0","title":"cubature 2.1.0","text":"CRAN release: 2023-06-11 Update cubature 1.0.4 Cuba 4.2.2 Added RANLIB call libcubature.(Issue 40). Thanks Sergei Fedorov. Simplified windows/non-windows organization, default windows","code":""},{"path":"/news/index.html","id":"cubature-2046","dir":"Changelog","previous_headings":"","what":"cubature 2.0.4.6","title":"cubature 2.0.4.6","text":"CRAN release: 2023-01-23 Fix CRAN C23 issues using system requirements USE_C17 Bug fix: increment correct count number evaluations. Thanks Jan Meis. Removed solaris unneeded Rcpp flags Copied correct includes inst/include linking","code":""},{"path":"/news/index.html","id":"cubature-2045","dir":"Changelog","previous_headings":"","what":"cubature 2.0.4.5","title":"cubature 2.0.4.5","text":"CRAN release: 2022-08-16 Fix math typesetting documentation use roxygen markdown tags wherever possible.","code":""},{"path":"/news/index.html","id":"cubature-2044","dir":"Changelog","previous_headings":"","what":"cubature 2.0.4.4","title":"cubature 2.0.4.4","text":"CRAN release: 2022-03-22 Fix unprotected arguments (Issue 34). Thanks Manuel Koller. Fix documentation (Issue 32). Thanks Emanuele Guidotti.","code":""},{"path":"/news/index.html","id":"cubature-2043","dir":"Changelog","previous_headings":"","what":"cubature 2.0.4.3","title":"cubature 2.0.4.3","text":"Unreleased","code":""},{"path":"/news/index.html","id":"cubature-2042","dir":"Changelog","previous_headings":"","what":"cubature 2.0.4.2","title":"cubature 2.0.4.2","text":"CRAN release: 2021-05-13 Fix Makevars refer CC C (Issue 33) Replace src/Cuba-4.2-win/common/Random.c:105 equivalent ensure gcc 8.x erroneous warning avoided Windows Add rmarkdown suggests description","code":""},{"path":"/news/index.html","id":"cubature-2041","dir":"Changelog","previous_headings":"","what":"cubature 2.0.4.1","title":"cubature 2.0.4.1","text":"CRAN release: 2020-07-06 Pass $(AR), $(ARFLAGS), $(RANLIB) make LTO checks pick correct plugins. Also add cleanup script. (Thanks, Prof. Brian Ripley)","code":""},{"path":"/news/index.html","id":"cubature-204","dir":"Changelog","previous_headings":"","what":"cubature 2.0.4","title":"cubature 2.0.4","text":"CRAN release: 2019-12-04 cubintegrate now matches method via match.arg (Issue 25) Address gcc version 10.0 changes due -fno-common default setting.","code":""},{"path":"/news/index.html","id":"cubature-203","dir":"Changelog","previous_headings":"","what":"cubature 2.0.3","title":"cubature 2.0.3","text":"CRAN release: 2018-12-18 Fixed stack overrun Cuba-4.2/src/divonne/Split.c (lines 119–128 utilizing flag first time loop cleanup Makevars","code":""},{"path":"/news/index.html","id":"cubature-202","dir":"Changelog","previous_headings":"","what":"cubature 2.0.2","title":"cubature 2.0.2","text":"CRAN release: 2018-12-11 Fixed uninitialized count hcubature (Thanks, Ehsan Masoudi) Tentative fix infinite value minfluct Cuba-4.2/src/suave/Integrate.c lines 197–205. (Thanks, Prof. Brian Ripley) Cleaned Makevars Makevars.win remove unused flags. Tentative fix solaris Makevars Cuba-4.2/src/common/stddecl.c. Removed printing statefile src/*/Integrate.c routines avoid segfault solaris. Added ret_code return value call getloadavg Cuba-4.2/src/common/Fork.c. Also added #ifdef SOLARIS including appropriate header solaris. Fixed call MASTER variadic macro including dummy argument 0 Cuba-4.2/src/common/Fork.c, line 146. Replaced multi-statement macro { } (0) hack. Reworked code around Cuba-4.2/src/divonne/Rule.c checks key values (lines 593 600). Fixed call WORKER variadic macro including dummy argument 0 Cuba-4.2/src/common/Parallel.c, line 393. Moved #ifdef FRAMECOPY outside Cuba-4.2/src/common/Parallel.c avoid embedding directives macro args, lines 70-80.","code":""},{"path":"/news/index.html","id":"cubature-20","dir":"Changelog","previous_headings":"","what":"cubature 2.0","title":"cubature 2.0","text":"CRAN release: 2018-11-23 Major update. Integrates Cuba 4.2 library Allows finite infinite limits integration (courtesy Simon Gaure) Deprecates doChecking argument. Now nothing removed future versions.","code":""},{"path":"/news/index.html","id":"cubature-14-1","dir":"Changelog","previous_headings":"","what":"cubature 1.4-1","title":"cubature 1.4-1","text":"CRAN release: 2018-10-26 Fixed scale argument tests conform pass checks. Removed reference orphaned package R2Cuba updated vignette information imminent 2.0 release.","code":""},{"path":"/news/index.html","id":"cubature-14","dir":"Changelog","previous_headings":"","what":"cubature 1.4","title":"cubature 1.4","text":"CRAN release: 2018-06-13 Fixed C call re-entrant (brought attention Pierre de Villemereuil). considered bug fix! Corrected private notes","code":""},{"path":"/news/index.html","id":"cubature-13-13","dir":"Changelog","previous_headings":"","what":"cubature 1.3-13","title":"cubature 1.3-13","text":"CRAN release: 2018-06-11 Generated package docs using pkgdown Synced cubature-1.0.3 Added LICENSE file (request Nick Youngblut)","code":""},{"path":"/news/index.html","id":"cubature-13-12","dir":"Changelog","previous_headings":"","what":"cubature 1.3-12","title":"cubature 1.3-12","text":"Minor typographical documentation fixes","code":""},{"path":"/news/index.html","id":"cubature-13-11","dir":"Changelog","previous_headings":"","what":"cubature 1.3-11","title":"cubature 1.3-11","text":"CRAN release: 2017-07-19 Merged Manuel Koller’s registration C code vignette fix NA. Moved cubature header exp_cubature headers inst/include linking packages","code":""},{"path":"/news/index.html","id":"cubature-13-10","dir":"Changelog","previous_headings":"","what":"cubature 1.3-10","title":"cubature 1.3-10","text":"Renamed Readme.md README.md Removed references ab-initio website caused hassle due misconfigured site.","code":""},{"path":[]},{"path":"/news/index.html","id":"cubature-13-8","dir":"Changelog","previous_headings":"","what":"cubature 1.3-8","title":"cubature 1.3-8","text":"CRAN release: 2017-05-11","code":""},{"path":"/news/index.html","id":"cubature-13-7","dir":"Changelog","previous_headings":"","what":"cubature 1.3-7","title":"cubature 1.3-7","text":"Registered .Call stuff removed microbenchmark suggestion favor benchr.","code":""},{"path":"/news/index.html","id":"cubature-13-4","dir":"Changelog","previous_headings":"","what":"cubature 1.3-4","title":"cubature 1.3-4","text":"Generated smaller pcubature header (clencurt.h) using M = 16 put back C cubature source tree.","code":""},{"path":"/news/index.html","id":"cubature-13-3","dir":"Changelog","previous_headings":"","what":"cubature 1.3-3","title":"cubature 1.3-3","text":"Moved cubature-1.0.2 C library github avoid hitting CRAN size limit.","code":""},{"path":"/news/index.html","id":"cubature-13-2","dir":"Changelog","previous_headings":"","what":"cubature 1.3-2","title":"cubature 1.3-2","text":"Added vignette showing huge gains due vectorization","code":""},{"path":"/news/index.html","id":"cubature-13-1","dir":"Changelog","previous_headings":"","what":"cubature 1.3-1","title":"cubature 1.3-1","text":"Added pcubature Added vector versions","code":""},{"path":"/news/index.html","id":"cubature-13-0","dir":"Changelog","previous_headings":"","what":"cubature 1.3-0","title":"cubature 1.3-0","text":"Moved SGJ cubature-1.0.2 version. adaptIntegrate hcubature aliases hcubature function gains norm argument set sensible default affect depending packages","code":""},{"path":"/news/index.html","id":"cubature-12-0","dir":"Changelog","previous_headings":"","what":"cubature 1.2-0","title":"cubature 1.2-0","text":"Moved Rcpp framework Added tests preparation SGJ cubature-1.0.2 version","code":""},{"path":"/news/index.html","id":"cubature-11-3","dir":"Changelog","previous_headings":"","what":"cubature 1.1-3","title":"cubature 1.1-3","text":"Roxygenized preparation upgrade newer version cubature library abinitio website","code":""},{"path":"/news/index.html","id":"cubature-11-2","dir":"Changelog","previous_headings":"","what":"cubature 1.1-2","title":"cubature 1.1-2","text":"CRAN release: 2013-02-25 Registered native cubature functions adapt_integrate adapt_integrate_v directly callable C (courtesy Simen Gaure)","code":""},{"path":"/news/index.html","id":"cubature-11-2-1","dir":"Changelog","previous_headings":"","what":"cubature 1.1-2","title":"cubature 1.1-2","text":"CRAN release: 2013-02-25 Fixed typo doc function adaptIntegrate; default value doChecking incorrectly stated TRUE","code":""},{"path":"/news/index.html","id":"cubature-11-1","dir":"Changelog","previous_headings":"","what":"cubature 1.1-1","title":"cubature 1.1-1","text":"CRAN release: 2011-12-08 Added doChecking argument (default FALSE) save computation time evaluating integrand (9% speedup).","code":""},{"path":"/news/index.html","id":"cubature-11","dir":"Changelog","previous_headings":"","what":"cubature 1.1","title":"cubature 1.1","text":"CRAN release: 2011-11-22 Synced SGJ cubature routines dated 2010-10-18 website Bugfix: potential memory leak fixed heap routine (oversight!) Routine adaptIntegrate gains … argument (request Baptiste Auguie) Corrected radius constant testFn2 match cubature output exactly","code":""},{"path":"/news/index.html","id":"cubature-10","dir":"Changelog","previous_headings":"","what":"cubature 1.0","title":"cubature 1.0","text":"CRAN release: 2009-12-20 Original version package based Steven G. Johnson’s cubature routines http://ab-initio.mit.edu/wiki/index.php/Cubature","code":""}]
